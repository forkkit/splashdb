// Generated by dts-bundle-generator v4.3.0

/// <reference types="node" />

import { Database } from 'rippledb'

export declare type SplashDBServerOptions = {
  secure?: boolean
  secureKey?: string | Buffer
  secureCert?: string | Buffer
  adminPassword?: string
  port?: number
  dbpath?: string
}
declare class DBManager {
  constructor(options: Required<SplashDBServerOptions>)
  options: Required<SplashDBServerOptions>
  dbCache: Map<string, Database>
  getDB(name: string): Database
  destroy(): Promise<void>
}
declare class AuthManager {
  constructor(options: Required<SplashDBServerOptions>, dbmanager: DBManager)
  options: Required<SplashDBServerOptions>
  dbmanager: DBManager
  can(authorization: string, method: string, dbname: string): Promise<boolean>
}
export declare class SplashDBServer {
  constructor(options?: SplashDBServerOptions)
  options: Required<SplashDBServerOptions>
  authManager: AuthManager
  dbManager: DBManager
  server: http2.Http2Server | http2.Http2SecureServer
  start: () => void
  destroy(): Promise<void>
}

export {}
